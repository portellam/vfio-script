#!/bin/false

#
# Project:        vfio-script
# Filename:       input_src
# Description:    Argument logic.
# Author(s):      Alex Portell <github.com/portellam>
# Maintainer(s):  Alex Portell <github.com/portellam>
# Version:        0.0.1
#

#region Sources (1/2)

declare -g SOURCE_PATH="${1}"
source "${SOURCE_PATH}datatype_src"

#endregion

#region Parameters

shopt -s nullglob   # aid with argument inputs.

if ! is_string "${2}"; then
  exit 1
fi

if ! is_string "${3}"; then
  exit 1
fi

declare -g SCRIPT_NAME="${2}"
declare -g SCRIPT_VERSION="${3}"
declare -gi COLUMN_SIZE="$( tput cols )"

declare -g DELIMITER=","

declare -g HARDWARE_ID_DELIM_REGEX="^(\s*$DELIMITER\s*|\s*([A-Za-z0-9]{4}:\s*[A-Za-z0-9]{4})\s*$DELIMITER\s*)*$"
declare -g IOMMU_GROUP_DELIM_REGEX="^([0-9]+)($DELIMITER[0-9]+)*$"
declare -g WORD_DELIM_REGEX="^[a-zA-Z]+($DELIMITER[a-zA-Z]+)*$"

declare -ga INPUT_LIST=()

declare -gA INPUT_DICT=(
  ["ALLOW_UNSAFE"]=false
  ["DYNAMIC_SETUP"]=false
  ["MATCH_CMDLINE"]=false
  ["MATCH_CMDLINE_DELIM"]=""
  ["MATCH_DRIVER"]=false
  ["MATCH_DRIVER_DELIM"]=""
  ["MATCH_IOMMU_GROUP"]=false
  ["MATCH_IOMMU_GROUP_DELIM"]=""
  ["MATCH_PCI_STUB_HARDWARE_ID"]=false
  ["MATCH_PCI_STUB_HARDWARE_ID_DELIM"]=""
  ["MATCH_VFIO_PCI_HARDWARE_ID"]=false
  ["MATCH_VFIO_PCI_HARDWARE_ID_DELIM"]=""
  ["MULTIPLE_GRUB_SETUP"]=false
  ["MULTIPLE_GRUB_SETUP_PERMUTATIONS"]=""
  ["UNMATCH_DRIVER"]=false
  ["UNMATCH_DRIVER_DELIM"]=""
  ["UNMATCH_HARDWARE_ID"]=false
  ["UNMATCH_HARDWARE_ID_DELIM"]=""
  ["UNMATCH_IOMMU_GROUP"]=false
  ["UNMATCH_IOMMU_GROUP_DELIM"]=""
  ["STATIC_SETUP"]=false
  ["STATIC_SETUP_OPTION"]=""
  ["VERBOSE"]=false
)

declare -gA INPUT_LIST_DICT=(
  ["MATCH_CMDLINE"]="MATCH_CMDLINE_DELIM"
  ["MATCH_DRIVER"]="MATCH_DRIVER_DELIM"
  ["MATCH_IOMMU_GROUP"]="MATCH_IOMMU_GROUP_DELIM"
  ["MATCH_PCI_STUB_HARDWARE_ID"]="MATCH_PCI_STUB_HARDWARE_ID_DELIM"
  ["MATCH_VFIO_PCI_HARDWARE_ID"]="MATCH_VFIO_PCI_HARDWARE_ID_DELIM"
  ["MULTIPLE_GRUB_SETUP"]="MULTIPLE_GRUB_SETUP_PERMUTATIONS"
  ["UNMATCH_GROUP"]="UNMATCH_GROUP_LIST"
  ["UNMATCH_DRIVER"]="UNMATCH_DRIVER_DELIM"
  ["UNMATCH_HARDWARE_ID"]="UNMATCH_HARDWARE_ID_DELIM"
  ["UNMATCH_IOMMU_GROUP"]="UNMATCH_IOMMU_GROUP_DELIM"
  ["STATIC_SETUP"]="STATIC_SETUP_OPTION"
)

#endregion

#region Sources (2/2)

source \
  "${SOURCE_PATH}print_src" \
  "${SOURCE_PATH}" \
  "${COLUMN_SIZE}"

#endregion

#region Logic

  #
  # $1 : the input dictionary key as a string.
  # $2 : the value to append as a string.
  #
  function append_input_dict_list
  {
    if ! is_string "${1}" \
      || ! is_string "${2}"; then
      print_invalid_option_and_exit "${2}"
    fi

    local append_input_dict_list_key=${INPUT_LIST_DICT["${1}"]}

    if ! is_string "${append_input_dict_list_key}" \
      || ! is_string "${2}"; then
      print_invalid_option_and_exit "${2}"
    fi

    INPUT_DICT["${append_input_dict_list_key}"]+="${2},"
    return 0
  }

  #
  # $1 : the input dictionary key as a string.
  # $2 : the value to append as a string.
  #
  function append_input_list
  {
    if ! is_string "${1}" \
      || ! is_string "${2}"; then
      print_invalid_option_and_exit "${2}"
    fi

    if ! is_string "${3}"; then
      print_error_to_log "Missing regex."
    fi

    value_as_delim="$( \
      remove_unnecessary_delimiters \
        "${2}" \
        "${DELIMITER}"
    )"

    append_input_dict_list \
      "${1}" \
      "${value_as_delim}"

    return 0
  }

  #
  # $1 : the input dictionary key as a string.
  # $2 : the value to append as a string.
  # $3 : the regex to unmatch.
  #
  function append_input_list_with_regex
  {
    if ! is_string "${1}" \
      || ! is_string "${2}"; then
      print_invalid_option_and_exit "${2}"
    fi

    if ! is_string "${3}"; then
      print_error_to_log "Missing regex."
    fi

    value_as_delim="$( \
      remove_unnecessary_delimiters \
        "${2}" \
        "${DELIMITER}"
    )"

    if ! reference_has_unmatch \
      "value_as_delim" \
      "${3}"; then
      print_invalid_option_and_exit "${2}"
    fi

    append_input_dict_list \
      "${1}" \
      "${value_as_delim}"

    return 0
  }

  #
  # $1 : the argument as a string.
  #
  function is_argument_or_empty_string
  {
    if ! is_string "${1}"; then
      return 0
    fi

    if [[ "${1}" == "---"* ]]; then
      return 1
    fi

    if [[ "${1}" == "-"* ]] \
      || [[ "${1}" == "--"* ]]; then
      return 0
    fi

    return 1
  }

  function is_verbose
  {
    if ! "${INPUT_DICT["VERBOSE"]}"; then
      return 1
    fi

    return 0
  }

  #
  # $@ : the argument(s) as an array.
  #
  function parse_many_arguments
  {
    if ! parse_this_argument "${@}"; then
      return 1
    fi

    trim_input_lists
    return 0
  }

  #
  # $1 : the argument as a string.
  # $@ : the option(s) as an array.
  #
  function parse_this_argument
  {
    while true; do
      local -a this_input_list=()

      case "${1}" in
        #region Additional commands

        "-u" \
          | "--allow-unsafe" )
          this_input_list=( "ALLOW_UNSAFE" )
          ;;

        "-c" \
          | "--grub-cmdline" \
          | "--grub-cmdlines" )
          local key="MATCH_CMDLINE"
          this_input_list=( "${key}" )
          shift

          if ! append_input_list \
              "${key}" \
              "${1}"; then
            return 1
          fi
          ;;

        #endregion

        #region Guest matches

        "-d" \
          | "--driver" \
          | "--drivers" \
          | "${ARGUMENT_MATCH_DRIVER}" )
          local key="MATCH_DRIVER"
          this_input_list=( "${key}" )
          shift

          if ! append_input_list_with_regex \
              "${key}" \
              "${1}" \
              "${WORD_DELIM_REGEX}"; then
            return 1
          fi
          ;;

        "-g" \
          | "--iommu-group" \
          | "--iommu-groups" \
          | "${ARGUMENT_MATCH_IOMMU_GROUP}" )
          local key="MATCH_IOMMU_GROUP"
          this_input_list=( "${key}" )
          shift

          if ! append_input_list_with_regex \
              "${key}" \
              "${1}" \
              "${IOMMU_GROUP_DELIM_REGEX}"; then
            return 1
          fi
          ;;

        "-p" \
          | "--pci-stub-id" \
          | "--pci-stub-ids" \
          | "${ARGUMENT_MATCH_PCI_STUB_HARDWARE_ID}" )
          local key="MATCH_PCI_STUB_HARDWARE_ID"
          this_input_list=( "${key}" )
          shift

          if ! append_input_list_with_regex \
              "${key}" \
              "${1}" \
              "${HARDWARE_ID_DELIM_REGEX}"; then
            return 1
          fi
          ;;

        "-V" \
        | "--vfio-pci-id" \
        | "--vfio-pci-ids" \
        | "${ARGUMENT_MATCH_VFIO_PCI_HARDWARE_ID}" )
          local key="MATCH_VFIO_PCI_HARDWARE_ID"
          this_input_list=( "${key}" )
          shift

          if ! append_input_list_with_regex \
              "${key}" \
              "${1}" \
              "${HARDWARE_ID_DELIM_REGEX}"; then
            return 1
          fi
          ;;

        #endregion

        #region Host matches

        "--exclude-driver" \
          | "--exclude-drivers" )
          local key="UNMATCH_DRIVER"
          this_input_list=( "${key}" )
          shift

          if ! append_input_list_with_regex \
              "${key}" \
              "${1}" \
              "${WORD_DELIM_REGEX}"; then
            return 1
          fi
          ;;

        "--exclude-hardware-id" \
          | "--exclude-hardware-ids" )
          local key="UNMATCH_HARDWARE_ID"
          this_input_list=( "${key}" )
          shift

          if ! append_input_list_with_regex \
              "${key}" \
              "${1}" \
              "${HARDWARE_ID_DELIM_REGEX}"; then
            return 1
          fi
          ;;

        "--exclude-iommu-group" \
          | "--exclude-iommu-groups" )
          local key="UNMATCH_IOMMU_GROUP"
          this_input_list=( "${key}" )
          shift

          if ! append_input_list_with_regex \
              "${key}" \
              "${1}" \
              "${IOMMU_GROUP_DELIM_REGEX}"; then
            return 1
          fi
          ;;

        #endregion

        #region VFIO setups

        "-D" \
          | "--dynamic" )
          this_input_list=( "DYNAMIC_SETUP" )
          ;;

        "-M" \
          | "--multi-grub" \
          | "--multiple-grub" )
          this_input_list=( "MULTIPLE_GRUB_SETUP" )
          ;;

        "-S" \
          | "--static" )
          local key="STATIC_SETUP"
          this_input_list=( "${key}" )
          shift

          if ! append_input_list_with_regex \
              "${key}" \
              "${1}"; then
            return 1
          fi
          ;;

        #endregion

        #region Essential commands

        "-h" \
          | "--help" )
          INPUT_DICT["VERBOSE"]=true
          print_usage
          exit 2
          ;;

        "-v" \
          | "--verbose" )
          INPUT_DICT["VERBOSE"]=true
          ;;

        #endregion

        #region Null command

        "" )
          return 0
          ;;

        * )
          print_invalid_argument "${1}"
          return 1
          ;;

        #endregion
      esac

      for this_input in "${this_input_list[@]}"; do
        INPUT_DICT["${this_input}"]=true
        INPUT_LIST+=( "${this_input}" )

      done

      shift
    done

    return 0
  }

  #
  # $@ : the argument(s) as an array.
  #
  function print_invalid_argument
  {
    if ! is_verbose; then
      return 1
    fi

    local message="Error: Invalid argument(s) specified."

    if is_string "${@}"; then
      message="${message::-1}: '${@}'"
    fi

    print_and_log_output "${message}"
    print_usage
    return 0
  }

  #
  # $1 : the option as a string.
  #
  function print_invalid_option
  {
    if ! is_verbose; then
      return 1
    fi

    local message="Error: Invalid option specified."

    if is_string "${1}"; then
      message="${message::-1}: '${1}'"
    fi

    print_and_log_output "${message}"
    return 1
  }

  #
  # $1 : the option as a string.
  #
  function print_invalid_option_and_exit
  {
    if ! is_verbose; then
      exit 1
    fi

    local message="Error: Invalid option specified."

    if is_string "${1}"; then
      message="${message::-1}: '${1}'"
    fi

    print_and_log_output "${message}"
    print_usage
    exit 1
  }

  function print_usage
  {
    if ! is_verbose; then
      return 0
    fi

    local -i column_prefix_count=28

    echo -e "Usage:\t${SCRIPT_NAME} [ARGUMENTS]"

    wrap_text \
      false \
      false \
      false \
      0 \
      "${COLUMN_SIZE}" \
      "Easily and automate the install, uninstall, or reinstall of a hardware-passthrough (VFIO) setup on a Linux machine. Select from either a dynamic, GRUB, or static setup."

    wrap_text \
      false \
      false \
      false \
      0 \
      "${COLUMN_SIZE}" \
      "Version ${SCRIPT_VERSION}."

    echo
    echo -en "  -h, --help                "

    wrap_text \
      false \
      false \
      true \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "Print this help and exit."

    echo -en "  -v, --verbose             "

    wrap_text \
      false \
      false \
      true \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "Show all output."

    #region VFIO setups

    echo
    echo -e "VFIO setups:\n"
    echo -en "  -D, --dynamic            "

    wrap_text \
      false \
      false \
      false \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "Define a temporary VFIO setup as a QEMU command line. Append to a Libvirt hook or a Guest machine configuration file. This VFIO setup may be created/destroyed on a Guest startup/shutdown."

    echo
    echo -en "  -M|--multiple-grub NUMS  "

    wrap_text \
      false \
      false \
      false \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "Define one or more persistent VFIO setup(s) as GRUB command line permutations; setup(s) are defined as individual GRUB boot menu entries, where one permutation may be chosen at Host machine startup."

    echo -en "$( get_repeated_space "${column_prefix_count}" )"

    wrap_text \
      false \
      false \
      true \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "Note: multiple GPUs on separate IOMMU groups will create multiple permutations."

    echo
    echo -en "$( get_repeated_space "${column_prefix_count}" )"

    wrap_text \
      false \
      false \
      false \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "NUMS is a comma delimited list of positive numbers representing selected kernel(s); multiply the permutations by the number of available kernel(s) to be used (sorted newest to oldest)."

    echo -en "$( get_repeated_space "${column_prefix_count}" )"

    wrap_text \
      false \
      false \
      true \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "Note: to use all available, input '0'."

    echo
    echo -en "  -S|--static OPT          "

    wrap_text \
      false \
      false \
      false \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "Define a persistent VFIO setup."

    echo -en "$( get_repeated_space "${column_prefix_count}" )"

    wrap_text \
      false \
      false \
      true \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "OPT is an option."

    echo
    echo -en "  --static grub            "

    wrap_text \
      false \
      false \
      false \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "Write to GRUB."

    echo
    echo -en "  --static conf            "

    wrap_text \
      false \
      false \
      false \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "Write various configuration files."

    #endregion

    #region Additional arguments

    column_prefix_count=28

    echo
    echo -e "Additional arguments:\n"
    echo -en "  -u, --allow-unsafe       "

    wrap_text \
      false \
      false \
      false \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "Override safety limits. Override a maximum amount of permutations, and/or features which may repeat a given command many times."

    echo -en "$( get_repeated_space "${column_prefix_count}" )"

    wrap_text \
      false \
      false \
      true \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "Note: safety limits are five (5) units each."

    echo -en "$( get_repeated_space "${column_prefix_count}" )"

    wrap_text \
      false \
      false \
      true \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "Note: no prompt at execution."

    echo
    echo -en "  -c, --grub-cmdline TEXT  "

    wrap_text \
      false \
      false \
      false \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "Define the GRUB command line."

    echo -en "$( get_repeated_space "${column_prefix_count}" )"

    wrap_text \
      false \
      false \
      true \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "Note: avoid escape characters, such as double-quote (\") and/or VFIO commands so as to prevent conflicts."

    echo -en "$( get_repeated_space "${column_prefix_count}" )"

    wrap_text \
      false \
      false \
      true \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "TEXT is whitespace delimited text."

    #endregion

    #region Guest-machine-reserved devices to match

    column_prefix_count=29

    echo
    echo -e "Guest-machine-reserved devices to match:\n"
    echo -en "  -g|--iommu-groups GROUPS  "

    wrap_text \
      false \
      false \
      false \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "Specify which IOMMU groups may be reserved for any Guest machine."

    echo -en "$( get_repeated_space "${column_prefix_count}" )"

    wrap_text \
      false \
      false \
      true \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "GROUPS is a comma delimited list of text."

    echo
    echo -en "  -d|--drivers DRIVERS      "

    wrap_text \
      false \
      false \
      false \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "Specify which devices' drivers to override with the \"vfio-pci\" driver."

    echo -en "$( get_repeated_space "${column_prefix_count}" )"

    wrap_text \
      false \
      false \
      true \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "DRIVERS is a comma delimited list of text."

    echo
    echo -en "  -V|--vfio-pci-ids HWIDS   "

    wrap_text \
      false \
      false \
      false \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "Specify which devices' IDs to blacklist."

    echo -en "$( get_repeated_space "${column_prefix_count}" )"

    wrap_text \
      false \
      false \
      true \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "HWIDS is a comma delimited list of text."

    echo
    echo -en "  -p|--pci-stub-ids HWIDS   "

    wrap_text \
      false \
      false \
      false \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "Specify which devices' IDs to blacklist and drivers to override with the \"pci-stub\" driver."

    echo -en "$( get_repeated_space "${column_prefix_count}" )"

    wrap_text \
      false \
      false \
      true \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "HWIDS is a comma delimited list of text."

    #endregion

    #region Host-machine-reserved devices to match

    column_prefix_count=35

    echo
    echo -e "Host-machine-reserved devices to match:\n"
    echo -en "  --exclude-drivers DRIVERS       "

    wrap_text \
      false \
      false \
      false \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "Specify which devices' drivers to not override with a VFIO driver, if not defined within \"--drivers\"."

    echo -en "$( get_repeated_space "${column_prefix_count}" )"

    wrap_text \
      false \
      false \
      true \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "DRIVERS is a comma delimited list of text."

    echo
    echo -en "  --exclude--iommu-groups GROUPS  "

    wrap_text \
      false \
      false \
      false \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "Specify which IOMMU groups may be reserved for the Host machine, if not defined within \"--iommu-groups\"."

    echo -en "$( get_repeated_space "${column_prefix_count}" )"

    wrap_text \
      false \
      false \
      true \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "GROUPS is a comma delimited list of positive numbers."

    echo
    echo -en "  --exclude-hardware-ids HWIDS    "

    wrap_text \
      false \
      false \
      false \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "Specify which devices' IDs to whitelist, if not defined within \"--vfio-pci-ids\" or \"--pci-stub-ids\"."

    echo -en "$( get_repeated_space "${column_prefix_count}" )"

    wrap_text \
      false \
      false \
      true \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "HWIDS is a comma delimited list of text."

    #endregion

    #region Examples

    echo -e "Examples:\n"
    echo -en "  ${SCRIPT_NAME} " # do wrap_text for args here.

    column_prefix_count=$(( "${#SCRIPT_NAME}" + 3 ))

    wrap_text \
      false \
      false \
      true \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "--multiple-grub 3"

    echo -en "$( get_repeated_space "${column_prefix_count}" )"

    column_prefix_count=28
    text="Define a multiple of GRUB boot menu entries (as individual"
    text+="VFIO setups), multiplied by the number of kernels or three (3)."

    wrap_text \
      false \
      false \
      false \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "${text}"

    #endregion
  }

  function trim_input_lists
  {
    INPUT_DICT["MATCH_CMDLINE_DELIM"]="$( \
      truncate_index_from_delimited_list \
        -1 \
        "${INPUT_DICT["MATCH_CMDLINE_DELIM"]}" \
    )"

    INPUT_DICT["MATCH_DRIVER_DELIM"]="$( \
      truncate_index_from_delimited_list \
        -1 \
        "${INPUT_DICT["MATCH_DRIVER_DELIM"]}" \
    )"

    INPUT_DICT["MATCH_IOMMU_GROUP_DELIM"]="$( \
      truncate_index_from_delimited_list \
        -1 \
        "${INPUT_DICT["MATCH_IOMMU_GROUP_DELIM"]}" \
    )"

    INPUT_DICT["MATCH_PCI_STUB_HARDWARE_ID_DELIM"]="$( \
      truncate_index_from_delimited_list \
        -1 \
        "${INPUT_DICT["MATCH_PCI_STUB_HARDWARE_ID_DELIM"]}" \
    )"

    INPUT_DICT["MATCH_VFIO_PCI_HARDWARE_ID_DELIM"]="$( \
      truncate_index_from_delimited_list \
        -1 \
        "${INPUT_DICT["MATCH_VFIO_PCI_HARDWARE_ID_DELIM"]}" \
    )"

    INPUT_DICT["UNMATCH_GROUP_LIST"]="$( \
      truncate_index_from_delimited_list \
        -1 \
        "${INPUT_DICT["UNMATCH_GROUP_LIST"]}" \
    )"

    INPUT_DICT["UNMATCH_DRIVER_DELIM"]="$( \
      truncate_index_from_delimited_list \
        -1 \
        "${INPUT_DICT["UNMATCH_DRIVER_DELIM"]}" \
    )"

    INPUT_DICT["UNMATCH_HARDWARE_ID_DELIM"]="$( \
      truncate_index_from_delimited_list \
        -1 \
        "${INPUT_DICT["UNMATCH_HARDWARE_ID_DELIM"]}" \
    )"

    INPUT_DICT["UNMATCH_IOMMU_GROUP_DELIM"]="$( \
      truncate_index_from_delimited_list \
        -1 \
        "${INPUT_DICT["UNMATCH_IOMMU_GROUP_DELIM"]}" \
    )"

    return 0
  }