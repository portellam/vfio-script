#!/bin/false

#
# Filename:       static_vfio_src
# Version:        0.0.1
# Description:    Define a static VFIO setup, either by GRUB command line or
#                 various configuration files.
# Author(s):      Alex Portell <github.com/portellam>
# Maintainer(s):  Alex Portell <github.com/portellam>
#

#
# TODO:
# - [ ] if overwrite fails, restore from backup.
# - [ ] on failure, undo changes.
# - [ ] backup existing copy.
# - [ ] restore from source.
#

SOURCE_ETC_PATH="${1}"
USE_GRUB=false
ALLOW_UNSAFE=false

if [[ "${2}" != "" ]]; then
  USE_GRUB=true
fi

if [[ "${3}" != "" ]]; then
  ALLOW_UNSAFE=true
fi

DELIM=","
HARDWARE_ID_REGEX="^[a-zA-Z0-9]{4}:[a-zA-Z0-9]{4}$"
VFIO_PCI_DRIVER="vfio-pci"

CMDLINE_DEFAULTS="quiet splash"
CMDLINE_EARLY_LOAD_MODULES="rd.driver.pre=${VFIO_PCI_DRIVER}"
CMDLINE_EARLY_LOAD_MODULES+="rd.modules-load=${VFIO_PCI_DRIVER}"
CMDLINE_FOR_WINDOWS10="kvm.ignore_msrs=1"
CMDLINE_POWER_MANAGEMENT="acpi=force apm=power_off pcie_aspm=off"
CMDLINE_PRIVACY="rfkill.default_state=1 systemd.restore_state=0"
CMDLINE_UNSET_FRAMEBUFFER="video=efifb:off,vesafb:off"

CMDLINE_PREFIX="${CMDLINE_DEFAULTS} ${CMDLINE_PRIVACY}"
CMDLINE_PREFIX+="${CMDLINE_POWER_MANAGEMENT} ${CMDLINE_EARLY_LOAD_MODULES}"
CMDLINE_PREFIX+="${CMDLINE_UNSET_FRAMEBUFFER} ${CMDLINE_FOR_WINDOWS10}"

CPU_VENDOR_ID="$( \
  lscpu \
  | grep \
    --extended-regexp \
    --ignore-case \
    Vendor \
  | awk \
    'END {print $3}' \
)"

function sanitize_hardware_id_delim
{
  if [[ "${1}" == "" ]]; then
    return 1
  fi

  local -n delim="${1}"

  last_char="$( \
    echo \
    ${delim:${#delim}-1} \
  )"

  last_element="$( \
    echo \
      "${delim}" \
    | awk \
      -F "${DELIM}" \
      '{print $NF}' \
  )"

  if [[ "${last_char}" != "${DELIM}" ]] \
    && [[ "${last_element}" =~ "${HARDWARE_ID_REGEX}" ]]; then
    delim="$( \
      echo \
        "${delim}" \
      | sed \
        's/, [^,]*$//' \
    )"
  fi
}

function static_vfio_src_main
{
  vfio_pci_driver_delim="${1}"
  vfio_pci_hardware_id_delim="${2}"
  pci_stub_hardware_id_delim="${3}"

  sanitize_hardware_id_delim "${pci_stub_hardware_id_delim}"
  sanitize_hardware_id_delim "${vfio_pci_hardware_id_delim}"

  if ! get_kernel_cmdline_iommu_driver; then
    return 1
  fi

  if "${USE_GRUB}"; then
    if ! write_grub \
        "${vfio_pci_driver_delim}" \
        "${vfio_pci_hardware_id_delim}" \
        "${pci_stub_hardware_id_delim}" \
      || ! update_grub; then
      return 1
    fi

  else
    if ! write_initramfs \
        "${vfio_pci_driver_delim}" \
        "${vfio_pci_hardware_id_delim}" \
        "${pci_stub_hardware_id_delim}" \
      || ! write_modprobe_blacklists \
        "${vfio_pci_driver_delim}" \
      || ! write_modprobe_vfio \
        "${vfio_pci_driver_delim}" \
        "${vfio_pci_hardware_id_delim}" \
        "${pci_stub_hardware_id_delim}" \
      || ! write_modules \
        "${vfio_pci_driver_delim}" \
      || ! update_initramfs; then
      return 1
    fi
  fi
}

function get_kernel_cmdline_iommu_driver
{
  case "${CPU_VENDOR_ID}" in
    *"amd"* )
      CMDLINE_PREFIX="amd_iommu=on ${CMDLINE_PREFIX}" ;;

    *"intel"* )
      CMDLINE_PREFIX="intel_iommu=on ${CMDLINE_PREFIX}" ;;

    * )
      print_error_to_log "Unknown CPU vendor '${CPU_VENDOR_ID}'."

      if "${ALLOW_UNSAFE}"; then
        return 0
      fi

      return 1 ;;
  esac
}

function update_grub
{
  output="Updating GRUB"
  print_output_to_log "${output}"

  if ! sudo \
    update-grub; then
    print_fail_to_log "${output}"
    return 1
  fi

  print_pass_to_log "${output}"
}

function update_initramfs
{
  output="Updating initramfs"
  print_output_to_log "${output}"

  if ! sudo \
    update-initramfs \
    -u \
    -k \
    all; then
    print_fail_to_log "${output}"
    return 1
  fi

  print_pass_to_log "${output}"
}

function write_grub
{
  vfio_pci_driver_delim="${1}"
  vfio_pci_hardware_id_delim="${2}"
  pci_stub_hardware_id_delim="${3}"

  cmdline="modprobe.blacklist=${vfio_pci_driver_delim} "
  cmdline+="pci_stub.ids=${pci_stub_hardware_id_delim} "
  cmdline+="vfio_pci.ids=${vfio_pci_hardware_id_delim} "
  cmdline="${CMDLINE_PREFIX}${cmdline::-1}"

  destination_path="/etc/default/grub"
  line_to_match="GRUB_CMDLINE_LINUX_DEFAULT="
  line_to_replace="${line_to_match}\"${cmdline}\""

  if ! sed \
    --in-place '/'"${line_to_match}"'/c\'"${line_to_replace}" \
    "${destination_path}" \
    &> /dev/null ; then
    print_error_to_log "Failed to overwrite '${destination_path}'."
    return 1
  fi
}

function write_initramfs
{
  vfio_pci_driver_delim="${1}"
  vfio_pci_hardware_id_delim="${2}"
  pci_stub_hardware_id_delim="${3}"

  partial_path="initramfs-tools/modules"
  source_path="${SOURCE_ETC_PATH}/${partial_path}"
  destination_path="/etc/${partial_path}"

  read \
    -r \
    -a vfio_pci_driver_list \
    <<< "${vfio_pci_driver_delim}"

  line_list=()

  for driver in "${vfio_pci_driver_list[@]}"; do
    line_list+=( "blacklist ${driver}" )
  done

  if [[ ! -z "${pci_stub_hardware_id_delim}" ]]; then
    hardware_id_delim="${pci_stub_hardware_id_delim},"
  fi

  if [[ ! -z "${vfio_pci_hardware_id_delim}" ]]; then
    hardware_id_delim+="${vfio_pci_hardware_id_delim}"

  else
    hardware_id_delim="${hardware_id_delim::-1}"
  fi

  if ! echo \
    -e \
    "\n${line_list[*]}" \
    >> "${destination_path}" \
  || ! sed \
    --in-place \
      "/# options vfio_pci ids=*/c\options vfio_pci_ids=\"${hardware_id_delim}\"" \
    "${destination_path}" \
    &> /dev/null \
  || ! sed \
    --in-place "/# vfio_pci ids=*/c\vfio_pci_ids=\"${hardware_id_delim}\"" \
    "${destination_path}" \
    &> /dev/null; then
    print_error_to_log "Failed to overwrite '${destination_path}'."
    return 1
  fi
}

function write_modprobe_blacklists
{
  vfio_pci_driver_delim="${1}"

  read \
    -r \
    -a vfio_pci_driver_list \
    <<< "${vfio_pci_driver_delim}"

  partial_path="modprobe.d/pci-blacklists.conf"
  source_path="${SOURCE_ETC_PATH}/${partial_path}"
  destination_path="/etc/${partial_path}"

  line_list=()

  for driver in "${vfio_pci_driver_list[@]}"; do
    line_list+=( "blacklist ${driver}" )
  done

  if ! echo \
    -e \
    "\n${line_list[*]}" \
    >> "${destination_path}"; then
    print_error_to_log "Failed to overwrite '${destination_path}'."
    return 1
  fi
}

function write_modprobe_vfio
{
  vfio_pci_driver_delim="${1}"
  vfio_pci_hardware_id_delim="${2}"
  pci_stub_hardware_id_delim="${3}"

  read \
    -r \
    -a vfio_pci_driver_list \
    <<< "${vfio_pci_driver_delim}"

  partial_path="modprobe.d/vfio.conf"
  source_path="${SOURCE_ETC_PATH}/${partial_path}"
  destination_path="/etc/${partial_path}"

  if [[ ! -z "${pci_stub_hardware_id_delim}" ]]; then
    hardware_id_delim="${pci_stub_hardware_id_delim},"
  fi

  if [[ ! -z "${vfio_pci_hardware_id_delim}" ]]; then
    hardware_id_delim+="${vfio_pci_hardware_id_delim}"

  else
    hardware_id_delim="${hardware_id_delim::-1}"
  fi

  if ! sed \
    --in-place \
      "/# options vfio_pci ids=*/c\options vfio_pci ids=\"${hardware_id_delim}\"" \
    "${destination_path}" \
    &> /dev/null; then
    print_error_to_log "Failed to overwrite '${destination_path}'."
    return 1
  fi

  line_list=()

  for driver in "${vfio_pci_driver_list[@]}"; do
    line_list=(
      "softdep ${driver} pre: ${VFIO_PCI_DRIVER}"
      "${driver}"
    )
  done

  for line in "${line_list[@]}"; do
    if ! sed \
      --in-place "23i ${line}" \
      "${INITRAMFS_MODULES_DEST_PATH}"; then
      print_error_to_log "Failed to overwrite '${destination_path}'."
      return 1
    fi
  done
}

function write_modules
{
  vfio_pci_driver_delim="${1}"

  read \
    -r \
    -a vfio_pci_driver_list \
    <<< "${vfio_pci_driver_delim}"

  partial_path="modules"
  destination_path="/etc/${partial_path}"

  if ! sed \
    --in-place "/# vfio_pci ids=*/c\vfio_pci_ids=\"${HWID_DELIM}\"" \
    "${destination_path}" \
    &> /dev/null; then
    print_error_to_log "Failed to overwrite '${destination_path}'."
    return 1
  fi

  for driver in "${vfio_pci_driver_list[@]}"; do
    line="softdep ${driver} pre: ${VFIO_PCI_DRIVER}"

    if ! sed \
      --in-place "7i ${line}" \
      "${destination_path}"; then
      print_error_to_log "Failed to overwrite '${destination_path}'."
      return 1
    fi
  done
}