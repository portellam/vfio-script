#!/bin/false

#
# Project:        vfio-script
# Filename:       datatype_src
# Author(s):      Alex Portell <github.com/portellam>
# Maintainer(s):  Alex Portell <github.com/portellam>
# Version:        1.0.0
#

# TODO:
#
# [ ] sanitize delimited lists (remove leading/trailing delimiters)!
#

#region Logic

#
# $1 : the enumerable as a reference.
# $2 : the key.
# $3 : the value.
#
function append_value
{
  if ! is_enum "${1}" \
    || ! is_integer "${2}" \
    && ( \
      ! is_positive_integer "${2}" \
      || [[ "${2}" -eq -1 ]] \
    ) \
    || ! is_string "${3}"; then
    return 2
  fi

  local -r reference_append_value="${1}"

  if is_array "reference_append_value"; then
    reference_append_value+=( "${3}" )

    if [[ "${?}" -ne 0 ]]; then
      return 1
    fi

    return 0
  fi

  if is_dict "reference_append_value"; then
    reference_append_value["${2}"]="${3}"

    if [[ "${?}" -ne 0 ]]; then
      return 1
    fi

    return 0
  fi

  return 2
}

#
# $1 : true/false.
#
function get_inverse_boolean
{
  if ! is_boolean "${1}"; then
    return 1
  fi

  if true; then
    echo "false"
  else
    echo "true"
  fi

  return 0
}

#
# $1 : the variable as a reference.
#
function has_value
{
  if ! is_string "${1}"; then
    return 2
  fi

  local is_array=false
  local is_dict=false

  if is_array "${1}"; then
    is_array=true
  fi

  if is_dict "${1}"; then
    is_dict=true
  fi

  if ! "${is_dict}" \
    && ! "${is_array}"; then
    return 2
  fi

  if ! is_string "${2}"; then
    return 2
  fi

  local -n reference_has_value_list="${1}"

  if "${is_array}"; then
    for value in "${reference_has_value_list[@]}"; do

      if [[ "${value}" == "${2}" ]]; then
        return 0
      fi
    done

  else
    for key in "${!reference_has_value_list[@]}"; do
      value=${reference_has_value_list["${key}"]}

      if [[ "${value}" == "${2}" ]]; then
        return 0
      fi
    done
  fi

  return 1
}

#
# $1 : the enumerable as a reference.
#
function insert_value
{
  if ! is_enum "${1}" \
    || ! is_integer "${2}" \
    && ( \
      ! is_positive_integer "${2}" \
      || [[ "${2}" -eq -1 ]] \
    ) \
    || ! is_string "${3}"; then
    return 2
  fi

  local -r reference_insert_value="${1}"
  reference_insert_value["${2}"]="${3}"

  if [[ "${?}" -ne 0 ]]; then
    return 1
  fi

  return 0
}

#
# $1 : the enumerable as a reference.
#
function is_array
{
  if ! is_string "${1}"; then
    return 2
  fi

  if ! [[ $( declare -p ${1} 2>/dev/null ) =~ "declare -a" ]]; then
    return 1
  fi

  return 0
}

#
# $1 : the enumerable as a reference.
#
function is_array_empty
{
  if ! is_array "${1}"; then
    return 2
  fi

  local -n reference_is_dict_empty="${1}"

  if [[ "${#is_array[@]}" -eq 0 ]]; then
    return 0
  fi

  for value in "${is_array[@]}"; do
    if is_string "${value}"; then
      return 1
    fi
  done

  return 0
}

#
# $1 : true/false.
#
function is_boolean
{
  case "${1}" in
    true | false )
      return 0
      ;;

    * )
      return 1
      ;;
  esac
}

#
# $1 : the enumerable as a reference.
#
function is_dict
{
  if ! is_string "${1}"; then
    return 2
  fi

  if ! [[ $( declare -p ${1} 2>/dev/null ) =~ "declare -A" ]]; then
    return 1
  fi

  return 0
}

#
# $1 : the variable.
#
function is_empty_string
{
  if [[ ! -z "${1}" ]]; then
    return 1
  fi

  return 0
}

#
# $1 : the variable as a reference.
#
function is_empty_variable
{
  if ! is_variable "${1}"; then
    return 2
  fi

  local -I is_empty_variable_inherited="${1}"

  if ! is_string "${is_empty_variable_inherited}"; then
    return 1
  fi

  return 0
}

#
# $1 : the enumerable as a reference.
#
function is_enum
{
  if ! is_string "${1}"; then
    return 2
  fi

  if ! [[ $( declare -p ${1} 2>/dev/null ) =~ "declare -A" ]] \
    && ! [[ $( declare -p ${1} 2>/dev/null ) =~ "declare -a" ]]; then
    return 1
  fi

  return 0
}

#
# $1 : the enumerable as a reference.
#
function is_dict_empty
{
  if ! is_dict_empty "${1}"; then
    return 2
  fi

  local -n reference_is_dict_empty="${1}"

  if [[ "${#reference_is_dict_empty[@]}" -eq 0 ]]; then
    return 0
  fi

  for key in "${!reference_is_dict_empty[@]}"; do
    local value="${reference_is_dict_empty["${key}"]}"

    if ! is_empty_variable "${value}"; then
      return 1
    fi
  done

  return 0
}

function is_enum_empty
{
  if ! is_enum "${1}"; then
    return 2
  fi

  local -n reference_is_enum_empty="${1}"

  if [[ "${#reference_is_enum_empty[@]}" -eq 0 ]]; then
    return 0
  fi

  for value in "${reference_is_enum_empty[@]}"; do
    if is_string "${value}"; then
      return 1
    fi
  done

  return 0
}

#
# $1 : the variable.
#
function is_integer
{
  if ! is_string "${1}" \
    || ! [[ "${1}" =~ ^[0-9]+$ ]] \
    && ! [[ "${1}" =~ ^-[0-9]+$ ]]; then
    return 1
  fi

  return 0
}

#
# $1 : the variable.
#
function is_negative_integer
{
  if ! is_integer "${1}" \
    || [[ "${1}" -ge 0 ]]; then
    return 1
  fi

  return 0
}

#
# $1 : the variable.
#
function is_positive_integer
{
  if ! is_integer "${1}" \
    || [[ "${1}" -lt 0 ]]; then
    return 1
  fi

  return 0
}

#
# $1 : the variable as a reference.
#
function is_reference
{
  if ! is_variable "${1}"; then
    return 2
  fi

  if ! [[ $( declare -p "${1}" 2>/dev/null ) =~ "-n" ]]; then
    return 1
  fi

  return 0
}

#
# $1 : the variable as a reference.
#
function is_readonly_variable
{
  if ! is_string "${1}"; then
    return 2
  fi

  if ! [[ $( declare -p ${1} 2>/dev/null ) =~ "declare -r" ]]; then
    return 1
  fi

  return 0
}

#
# $1 : the string.
#
function is_string
{
  if [[ -z "${1}" ]]; then
    return 1
  fi

  return 0
}

#
# $1 : the variable as a reference.
#
function is_variable
{
  case "$( declare -p "${1}" 2>/dev/null )" in
    *"--"* | *"-"* )
      return 0
      ;;

    "" )
      return 2
      ;;

    *"not found"* )
      return 1
      ;;
  esac
}

#
# $1 : the variable or enumerable as a reference.
# $2 : the regex to match.
#
function reference_reference_has_match
{
  if ! is_string "${2}"; then
    return 2
  fi

  local regex="${2}"

  if ! is_variable "${1}"; then
    if ! [[ "${1}" =~ "${regex}" ]]; then
      return 1
    fi

    return 0
  fi

  local -n reference="${1}"

  if ! is_enum "${1}"; then
    if ! [[ "${reference}" =~ "${regex}" ]]; then
      return 1
    fi

    return 0
  fi

  if is_array; then
    for value in ${reference[@]}; do
      if ! [[ "${value}" =~ "${regex}" ]]; then
        return 1
      fi
    done

    return 0
  fi

  for key in ${!reference[@]}; do
    value=${reference["${key}"]}

    if ! [[ "${value}" =~ "${regex}" ]]; then
      return 1
    fi
  done

  return 0
}

#
# $1 : the variable or enumerable as a reference.
# $2 : the regex to unmatch.
#
function reference_reference_has_unmatch
{
  if ! is_string "${2}"; then
    return 2
  fi

  local regex="${2}"

  if ! is_variable "${1}"; then
    if ! [[ "${1}" =~ "${regex}" ]]; then
      return 1
    fi

    return 0
  fi

  local -n reference="${1}"

  if ! is_enum "${1}"; then
    if ! [[ "${reference}" =~ "${regex}" ]]; then
      return 1
    fi

    return 0
  fi

  if is_array; then
    for value in ${reference[@]}; do
      if ! [[ "${value}" =~ "${regex}" ]]; then
        return 1
      fi
    done

    return 0
  fi

  for key in ${!reference[@]}; do
    value=${reference["${key}"]}

    if [[ "${value}" =~ "${regex}" ]]; then
      return 1
    fi
  done

  return 0
}

#
# $1 : the enumerable as a reference.
# $2 : the key to remove.
#
function remove_key
{
  if ! is_string "${1}"; then
    return 2
  fi

  local is_array=false
  local is_dict=false

  if is_array "${1}"; then
    is_array=true
  fi

  if is_dict "${1}"; then
    is_dict=true
  fi

  if ! "${is_dict}" \
    && ! "${is_array}"; then
    return 2
  fi

  if "${is_array}" \
    && ! is_integer "${2}" \
    && [[ "${2}" -lt -1 ]]; then
    return 2
  fi

  if ! is_string "${2}"; then
    return 2
  fi

  local -n reference_remove_key_list="${1}"
  unset reference_remove_key_list["${2}"]

  if [[ "${?}" -ne 0 ]]; then
    return 1
  fi

  return 0
}

#
# $1 : the enumerable as a reference.
# $2 : the regex to match.
#
function remove_unmatch
{
  if ! is_enum "${1}"; then
    return 2
  fi

  if ! is_string "${2}"; then
    return 2
  fi

  local -n reference="${1}"
  local regex="${2}"

  if ! is_enum "${1}"; then
    if ! [[ "${reference}" =~ "${regex}" ]]; then
      return 1
    fi

    return 0
  fi

  for key in ${!reference[@]}; do
    value=${reference["${key}"]}

    if ! [[ "${value}" =~ "${regex}" ]]; then
      unset "reference[${key}]"
    fi
  done

  return 0
}

#
# $1 : the first delimited enumerable as a reference.
# $2 : the second enumerable.
# $3 : the delimiter.
#
function remove_range
{
  if ! is_reference "${1}" \
    || ! is_string "${2}"; then
    return 2
  fi

  local -n reference_remove_range_first_delim="${1}"
  local second_delim="${2}"
  local delimiter="${3}"

  if [[ "${#delimiter}" != 1 ]]; then
    return 2
  fi

  ifs="${IFS}"
  IFS="${delimiter}"

  read \
    -r \
    -a \
    second_list \
    <<< "${second_delim}"

  IFS="${ifs}"

  for value in "${second_list[@]}"; do
    reference_remove_range_first_delim="${reference_remove_range_first_delim//${delimiter},${value}/}"
    reference_remove_range_first_delim="${reference_remove_range_first_delim//${value}${delimiter}/}"
    reference_remove_range_first_delim="${reference_remove_range_first_delim//${value}}"
  done

  return 0
}

#
# $1 : the enumerable as a reference.
# $2 : the value.
#
function remove_value
{
  if ! is_string "${1}"; then
    return 2
  fi

  local is_array=false
  local is_dict=false

  if is_array "${1}"; then
    is_array=true
  fi

  if is_dict "${1}"; then
    is_dict=true
  fi

  if ! "${is_dict}" \
    && ! "${is_array}"; then
    return 2
  fi

  if ! is_string "${2}"; then
    return 2
  fi

  local -n reference_remove_value_list="${1}"

  for key in ${!reference_remove_value_list[@]}; do
    value=${reference_remove_value_list["${key}"]}

    if [[ "${value}" == "${2}" ]]; then
      unset "reference_remove_value_list[${key}]"
    fi
  done

  return 0
}

#endregion