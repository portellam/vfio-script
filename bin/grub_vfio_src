#!/bin/false

#
# Project:        vfio-script
# Filename:       grub_vfio_src
# Description:    Define one or more VFIO setup(s), as distinct GRUB menu
#                 entries.
# Author(s):      Alex Portell <github.com/portellam>
# Maintainer(s):  Alex Portell <github.com/portellam>
# Version:        0.0.1
#

#region Sources

declare -g SOURCE_PATH="${1}"
shift
declare -g COLUMN_SIZE="$( tput cols )"

source \
  "${SOURCE_PATH}print_src" \
  "${SOURCE_PATH}" \
  "${COLUMN_SIZE}"

#endregion

#region Parameters

  #region Input Parameters

  declare -g ALLOW_UNSAFE=false
  declare -g SAFE_MAX=5

  if [[ "${1}" != "" ]]; then
    ALLOW_UNSAFE=true
  fi

  #endregion

declare -g EXECUTABLE="parse-iommu-devices"

declare -g DELIMITER=","
declare -g HARDWARE_ID_DELIM_REGEX="^(\s*$DELIMITER\s*|\s*([A-Za-z0-9]{4}:\s*[A-Za-z0-9]{4})\s*$DELIMITER\s*)*$"
declare -g IOMMU_GROUP_DELIM_REGEX="^([0-9]+)($DELIMITER[0-9]+)*$"
declare -g WORD_DELIM_REGEX="^[a-zA-Z]+($DELIMITER[a-zA-Z]+)*$"

declare -g VFIO_PCI_DRIVER="vfio-pci"

declare -g CMDLINE_DEFAULTS="quiet splash"
declare -g CMDLINE_EARLY_LOAD_MODULES="rd.driver.pre=${VFIO_PCI_DRIVER}"
declare -g CMDLINE_EARLY_LOAD_MODULES+="rd.modules-load=${VFIO_PCI_DRIVER}"
declare -g CMDLINE_FOR_WINDOWS10="kvm.ignore_msrs=1"
declare -g CMDLINE_POWER_MANAGEMENT="acpi=force apm=power_off pcie_aspm=off"
declare -g CMDLINE_PRIVACY="rfkill.default_state=1 systemd.restore_state=0"
declare -g CMDLINE_UNSET_FRAMEBUFFER="video=efifb:off,vesafb:off"

declare -g CMDLINE_PREFIX="${CMDLINE_DEFAULTS} ${CMDLINE_PRIVACY}"
CMDLINE_PREFIX+="${CMDLINE_POWER_MANAGEMENT} ${CMDLINE_EARLY_LOAD_MODULES}"
CMDLINE_PREFIX+="${CMDLINE_UNSET_FRAMEBUFFER} ${CMDLINE_FOR_WINDOWS10}"

declare -g NOVIDEO_DRIVER_DELIM=""
declare -g NOVIDEO_HARDWARE_ID_DELIM=""
declare -ga VIDEO_GROUP_DRIVER_DELIM_LIST=()
declare -ga VIDEO_GROUP_HARDWARE_ID_DELIM_LIST=()
declare -ga VIDEO_IOMMU_GROUP_LIST=()

#endregion

#region Logic

#
# DONE:
# - replaced dependent logic with input param logic.
# - added while loop.
# TODO:
# - remove unnecessary globals.
# - move `parse-iommu-devices` logic into separate source file? or one function?
#   - this will then call `grub_vfio_src_main` or `grub_vfio_src_write_most_grub` directly.
# - move `destination_path` to `grub_vfio_src_write_most_grub`. Only location.
#

#
# $1 : the whitespace delimited string of command lines.
# $2 : true/false remove limits.
# $@ : for a given permutation, repeat $3 => $6 indefinitely.
# $3 : for a given permutation, the comma delimited list of excluded IOMMU groups.
# $4 : for a given permutation, the comma delimited list of blacklisted drivers.
# $5 : for a given permutation, true/false use driver "vfio-pci" or "pci-stub".
# $6 : for a given permutation, the comma delimited string of device IDs.
#
function grub_vfio_src_main
{

  if ! is_string "${1}" \
    || ! is_boolean "${2}"; then
    return 2
  fi

  local cmdline_prefix="${1}"
  cmdline_prefix="${cmdline_prefix//\"/}"
  shift

  local allow_unsafe="${2}"
  shift

  local -a driver_delim_list=()
  local -a excluded_iommu_group_delim_list=()
  local -a pci_stub_id_delim_list=()
  local -a vfio_pci_id_delim_list=()

  local -i index=1
  local -i max_index="${SAFE_MAX}"

  if "${allow_unsafe}"; then
    max_index=128
  fi

  while [[ "${index}" -le "${max_index}" ]]; do
    if [[ "${1}" =~ "${IOMMU_GROUP_DELIM_REGEX}" ]]; then
      excluded_iommu_group_delim_list+=( "${1}" )

    elif [[ "${1}" =~ "${WORD_DELIM_REGEX}" ]]; then
      driver_delim_list+=( "${1}" )

    elif is_boolean "${1}"; then
      local do_use_vfio_pci="${1}"
      shift

      if ! [[ "${1}" =~ "${HARDWARE_ID_DELIM_REGEX}" ]]; then
        continue
      fi

      if "${do_use_vfio_pci}"; then
        pci_stub_id_delim_list+=( "" )
        vfio_pci_id_delim_list+=( "${1}" )
      else
        pci_stub_id_delim_list+=( "${1}" )
        vfio_pci_id_delim_list+=( "" )
      fi

    elif is_string "${1}"; then
      print_error_to_log "Invalid input."
      return 2

    else
      break
    fi

    shift
    (( index++ ))
  done

  if ! grub_vfio_src_get_kernel_cmdline_iommu_driver; then
    return 1
  fi

  local destination_path="/etc/grub.d/40_custom"

  if ! grub_vfio_src_write_most_grub \
      "${cmdline_prefix}" \
      "${destination_path}" \
    || ! grub_vfio_src_update_grub; then
    print_fail_to_log "Failed to install a GRUB VFIO setup."
    return 1
  fi

  print_pass_to_log "Installed a GRUB VFIO setup."
}

#
# $1 : the whitespace delimited string of command lines.
# $2 : the comma delimited list of IOMMU groups to exclude.
#
function grub_vfio_src_main_old
{
  local cmdline_prefix="${1}"

  if is_string "${cmdline_prefix}" \
    && reference_has_unmatch \
      "cmdline_prefix" \
      "${DRIVER_DELIM_REGEX}" \
    && reference_has_unmatch \
      "cmdline_prefix" \
      "${HARDWARE_ID_DELIM_REGEX}" \
    && reference_has_unmatch \
      "cmdline_prefix" \
      "${IOMMU_GROUP_DELIM_REGEX}"; then
    cmdline_prefix="${cmdline_prefix//\"/}"
    shift

  else
    cmdline_prefix=""
  fi

  local excluded_iommu_group_delim="${1}"

  if is_string "${excluded_iommu_group_delim}" \
    && ! reference_has_match \
      "excluded_iommu_group_delim" \
      "${IOMMU_GROUP_DELIM_REGEX}"; then
    return 2
  fi

  if ! grub_vfio_src_get_kernel_cmdline_iommu_driver; then
    return 1
  fi

  local destination_path="/etc/grub.d/40_custom"

  if ! grub_vfio_src_get_non_video_delims "${excluded_iommu_group_delim}" \
    || ! grub_vfio_src_get_video_delim_lists "${excluded_iommu_group_delim}" \
    || ! grub_vfio_src_write_most_grub \
      "${cmdline_prefix}" \
      "${destination_path}" \
    || ! grub_vfio_src_update_grub; then
    print_fail_to_log "Failed to install a GRUB VFIO setup."
    return 1
  fi

  print_pass_to_log "Installed a GRUB VFIO setup."
}

function grub_vfio_src_get_kernel_cmdline_iommu_driver
{
  local cpu_vendor_id="$( \
    lscpu \
    | grep \
      --extended-regexp \
      --ignore-case \
      Vendor \
    | awk \
      'END {print $3}' \
  )"

  case "${cpu_vendor_id}" in
    *"amd"* )
      CMDLINE_PREFIX="amd_iommu=on ${CMDLINE_PREFIX}" ;;

    *"intel"* )
      CMDLINE_PREFIX="intel_iommu=on ${CMDLINE_PREFIX}" ;;

    * )
      print_error_to_log "Unknown CPU vendor '${cpu_vendor_id}'."

      if "${ALLOW_UNSAFE}"; then
        return 0
      fi

      return 1 ;;
  esac
}

#
# $1 : the comma delimited list of IOMMU groups to exclude.
#
function grub_vfio_src_get_non_video_delims
{
  local excluded_iommu_group_delim="${1}"

  if is_string "${excluded_iommu_group_delim}" \
    && ! reference_has_match \
      "excluded_iommu_group_delim" \
      "${IOMMU_GROUP_DELIM_REGEX}"; then
    return 2
  fi

  local video_iommu_group_delim=$( \
    IFS=${DELIMITER}; \
    echo "${VIDEO_IOMMU_GROUP_LIST[*]}" \
  )

  if is_string "${video_iommu_group_delim}"; then
    excluded_iommu_group_delim+=",${video_iommu_group_delim}"
  fi

  local names_to_ignore_delim="ether"

  local output="$( \
    eval \
      "${EXECUTABLE}" \
      --ignore-group ${excluded_iommu_group_delim} \
      --ignore-name ${names_to_ignore_delim} \
      --pcie
  )"

  NOVIDEO_HARDWARE_ID_DELIM+="${output[0]}"
  NOVIDEO_DRIVER_DELIM+="${output[1]}"
}

#
# $1 : the comma delimited list of IOMMU groups to exclude.
#
function grub_vfio_src_get_video_delim_lists
{
  local excluded_iommu_group_delim="${1}"

  if is_string "${excluded_iommu_group_delim}" \
    && ! reference_has_match \
      "excluded_iommu_group_delim" \
      "${IOMMU_GROUP_DELIM_REGEX}"; then
    return 2
  fi

  local -i index=1
  local -i max_index="${SAFE_MAX}"
  local output=""

  if "${ALLOW_UNSAFE}"; then
    max_index=128
  fi

  while [[ "${index}" -le "${max_index}" ]]; do
    output="$( \
      eval \
        "${EXECUTABLE}" \
        --graphics "${index}" \
        --ignore-group "${excluded_iommu_group_delim}"
    )"

    if [[ "${output}" == "" ]]; then
      break
    fi

    VIDEO_GROUP_HARDWARE_ID_DELIM_LIST+=( "${output[0]}" )
    VIDEO_GROUP_DRIVER_DELIM_LIST+=( "${output[1]}" )
    VIDEO_IOMMU_GROUP_LIST+=( "${output[2]}" )
    (( index++ ))
  done
}

function grub_vfio_src_update_grub
{
  local output="Updating GRUB"
  print_output_to_log "${output}"

  if ! sudo \
    update-grub; then
    print_fail_to_log "${output}"
    return 1
  fi

  print_pass_to_log "${output}"
}

function grub_vfio_src_set_grub_entries
{
  if ! is_string "${1}"; then
    return 2
  fi

  local destination_path="${1}"

  if ! sed \
    -i \
    "s/+'/-'/g" \
    "${destination_path}" \
    &> /dev/null; then
    print_error_to_log "Failed to enable entries for GRUB proxy file."
    return 1
  fi
}

#
# $1 : the destination path.
#
function grub_vfio_src_unset_grub_entries
{
  if ! is_string "${1}"; then
    return 2
  fi

  local destination_path="${1}"

  if ! sed \
    -i \
    "s/+'/-'/g" \
    "${destination_path}" \
    &> /dev/null; then
    print_error_to_log "Failed to disable entries for GRUB proxy file."
    return 1
  fi
}

function grub_vfio_src_verify_dependencies
{
  if ! command \
    -v \
    "${EXECUTABLE}" \
    &> /dev/null; then
    print_error_to_log "Cannot continue. Missing '${EXECUTABLE}'."
    return 1
  fi
}

#
# $1 : the whitespace delimited string of command lines.
# $2 : the destination path.
# $3 : the max number of kernels.
# $4 : the default boot video device group index.
#
function grub_vfio_src_write_most_grub
{
  local cmdline_prefix="${1}"

  if ! [[ "${cmdline_prefix}" =~ "${DRIVER_DELIM_REGEX}" ]] \
    && ! [[ "${cmdline_prefix}" =~ "${HARDWARE_ID_DELIM_REGEX}" ]]; then
    shift

  else
    cmdline_prefix=""
  fi

  if ! is_string "${1}" \
    || ! is_string "${2}" \
    || ! is_string "${3}"; then
    return 2
  fi

  local destination_path="${1}"
  local -a max_parsed_kernels="${SAFE_MAX}"

  if "${ALLOW_UNSAFE}"; then
    max_parsed_kernels="${2}"
  fi

  if ! "${ALLOW_UNSAFE}" \
    && [[ "${2}" -le "${SAFE_MAX}" ]]; then
    max_parsed_kernels="${2}"
  fi

  local -i default_index=0

  if "${ALLOW_UNSAFE}"; then
    default_index="${3}"
  fi

  if ! "${ALLOW_UNSAFE}" \
    && [[ "${3}" -le "${SAFE_MAX}" ]]; then
    default_index="${3}"
  fi

  local match="/boot/vmli*"

  local -a kernel_list=( \
    $( \
      ls \
        -1 \
        "${match}" \
      | cut \
        --delimiter 'z' \
        --fields 2 \
      | cut \
        --characters 2- \
      | sort \
        --numeric-sort \
        --reverse \
      | head \
        --lines \
        "${max_parsed_kernels}" \
    )
  )

  local disk=$( \
    df \
      / \
    | grep \
      --ignore-case \
      --invert-match \
      'filesystem' \
    | cut \
      --delimiter '/' \
      --fields 3 \
    | cut \
      --delimiter ' ' \
      --fields 1 \
  )

  local distro=$( \
    lsb_release \
      --id \
      --short \
  )

  local fstype=$( blkid \
      --match-tag TYPE \
    | grep \
      "${disk}" \
    | cut \
      --delimiter "${DELIMITER}" \
      --fields 2 \
  )

  local os=$( uname )

  local uuid=$( \
    blkid \
      --match-tag UUID \
    | grep \
      "${disk}" \
    | cut \
      --delimiter "${DELIMITER}" \
      --fields 2 \
  )

  local -a output_list=(
    "#!/bin/sh"
    "exec tail -n +3 \$0"
    "# This file provides an easy way to add custom menu entries. Simply type the"
    "# menu entries you want to add after this comment. Be careful not to change"
    "# the 'exec tail' line above."
    "#"
  )

  local default_title=""
  local index=0
  local matched_index=false
  local -a title_list=()

  for kernel in "${kernel_list[@]}"; do
    for iommu_group in "${VIDEO_IOMMU_GROUP_LIST[@]}"; do
      driver_delim="${NOVIDEO_DRIVER_DELIM}${DELIM}"
      driver_delim+="${VIDEO_GROUP_DRIVER_DELIM_LIST[${index}]}"
      hardware_id_delim="${NOVIDEO_HARDWARE_ID_DELIM}${DELIM}"
      hardware_id_delim+="${VIDEO_GROUP_HARDWARE_ID_DELIM_LIST[${index}]}"

      grub_vfio_src_write_this_grub \
        "output_list" \
        "title_list" \
        "${cmdline_prefix}" \
        "${iommu_group}" \
        "${kernel}" \
        "${distro}" \
        "${fstype}" \
        "${os}" \
        "${uuid}" \
        "${driver_delim}" \
        "${hardware_id_delim}"

      if [[ "${index}" -eq "${default_index}" ]] \
        && ! "${matched_index}"; then
        default_title="${title_list[-1]}"
        matched_index=true
      fi

      (( index++ ))
    done
  done

  local destination_dir=$( dirname "${destination_path}" )

  if [[ ! -d "${destination_dir}" ]] \
    && ! sudo \
      mkdir \
        --parents \
        "${destination_dir}"; then
    print_error_to_log "Failed to create directory '${destination_dir}'."
    return 1
  fi

  local error="Failed to overwrite GRUB proxy file."

  if ! sed \
      -i \
      '/'"${line_to_match}"'/c\'"${line_grub_default}" \
      "${GRUB_DEST_PATH}" \
    || ! echo \
      -e \
      "\n${output_list[*]}" \
      >> "${destination_path}" ; then
    print_error_to_log "${error}"
    return 1
  fi

  local destination_path="/etc/default/grub"
  local line_to_match="GRUB_DEFAULT="

  if [[ "${default_title}" == "" ]]; then
    line_grub_default="${line_to_match}${default_index}"

  else
    line_grub_default="${line_to_match}${default_title}"
  fi

  if ! sed \
      -i \
      '/'"${line_to_match}"'/c\'"${line_grub_default}" \
      "${destination_path}"; then
    print_error_to_log "${error}"
    return 1
  fi
}

#
# $1  : the reference.
# $2  : the whitespace delimited string of command lines.
# $3  : the IOMMU group ID.
# $4  : the system distrobution.
# $5  : the file system.
# $6  : the operating system.
# $7  : the system UUID.
# $8  : the comma delimited string of blacklisted device drivers.
# $9  : the comma delimited string of device IDs to use "vfio-pci".
# $10 : the comma delimited string of device IDs to use "pci-stub".
#
function grub_vfio_src_write_this_grub
{
  if ! is_string "${1}"; then
    return 2
  fi

  local -n output_list_ref="${1}"
  shift

  if ! is_string "${1}"; then
    return 2
  fi

  local -n title_list_ref="${1}"
  shift

  local cmdline_prefix="${1}"

  if ! [[ "${cmdline_prefix}" =~ "${DRIVER_DELIM_REGEX}" ]] \
    && ! [[ "${cmdline_prefix}" =~ "${HARDWARE_ID_DELIM_REGEX}" ]]; then
    shift

  else
    cmdline_prefix=""
  fi

  if ! is_string "${1}" \
    || ! is_string "${2}" \
    || ! is_string "${3}" \
    || ! is_string "${4}" \
    || ! is_string "${5}" \
    || ! is_string "${6}"; then
    return 2
  fi

  local iommu_group="${1}"
  local kernel="${2}"
  local distro="${3}"
  local fstype="${4}"
  local os="${5}"
  local uuid="${6}"

  local vfio_pci_driver_delim="${7}"
  local vfio_pci_hardware_id_delim="${8}"
  local pci_stub_hardware_id_delim="${9}"

  local cmdline="modprobe.blacklist=${vfio_pci_driver_delim} "
  cmdline+="pci_stub.ids=${pci_stub_hardware_id_delim} "
  cmdline+="vfio_pci.ids=${vfio_pci_hardware_id_delim} "
  cmdline="${CMDLINE_PREFIX}${cmdline_prefix}${cmdline::-1}"
  cmdline="GRUB_CMDLINE_LINUX_DEFAULT=\"${cmdline}\""

  local partial_title="VFIO w/o IOMMU group '${iommu_group}';"
  partial_title+=" Video: '${this_iommu_group_vga_name}'"

  local title="${distro}, with ${os} ${kernel} (${partial_title})"
  title_list_ref+=( "${title}" )

  output_list_ref+=(
    "menuentry \"${title}\"{"
    # "\tload_video"
    # "insmod gzio"
    # "if [ x\$grub_platform = xxen ]; then insmod xzio; insmod lzopio; fi"
    # "insmod part_gpt"
    "\tinsmod ${fstype}"
    "\tset root='/dev/disk/by-uuid/${uuid}'"
    "\t"'if [ x$feature_platform_search_hint = xy ]; then'"\n\t\t"'search --no-floppy --fs-uuid --set=root '"${uuid}\n\t"'fi'
    "\techo  'Loading ${os} ${kernel} ...'"
    "\tlinux   /boot/vmlinuz-${kernel} root=UUID=${uuid} ${cmdline}"
    "\tinitrd  /boot/initrd.img-${kernel}"
    "\techo  \"${title}\""
    "}"
    ""
  )
}

#endregion